// <auto-generated />
using CCIA.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace CCIA.Data.Migrations
{
    [DbContext(typeof(CCIAContext))]
    [Migration("20190115002027_more-app-references")]
    partial class moreappreferences
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CCIA.Models.AbbrevAppType", b =>
                {
                    b.Property<int>("AppTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("app_type_id");

                    b.Property<string>("Abbreviation")
                        .HasColumnName("abbreviation")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("AppTypeTrans")
                        .HasColumnName("app_type_trans")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("CertificateTitle")
                        .HasColumnName("certificate_title")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("NumberTitle")
                        .HasColumnName("number_title")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("ProcessTitle")
                        .HasColumnName("process_title")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ProducedTitle")
                        .HasColumnName("produced_title")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("ShowType")
                        .HasColumnName("show_type");

                    b.Property<string>("SirTitle")
                        .HasColumnName("sir_title")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SpeciesOrCrop")
                        .HasColumnName("species_or_crop")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("VarietyTitle")
                        .HasColumnName("variety_title")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("AppTypeId");

                    b.ToTable("abbrev_app_type");
                });

            modelBuilder.Entity("CCIA.Models.AbbrevClassProduced", b =>
                {
                    b.Property<int>("ClassProducedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("class_produced_id");

                    b.Property<int?>("AppType")
                        .HasColumnName("app_type");

                    b.Property<string>("ClassAbbrv")
                        .HasColumnName("class_abbrv")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("ClassProducedTrans")
                        .HasColumnName("class_produced_trans")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("SortOrder")
                        .HasColumnName("sort_order");

                    b.HasKey("ClassProducedId");

                    b.ToTable("abbrev_class_produced");
                });

            modelBuilder.Entity("CCIA.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("address_id");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnName("address1")
                        .HasMaxLength(100);

                    b.Property<string>("Address2")
                        .HasColumnName("address2")
                        .HasMaxLength(100);

                    b.Property<string>("Address3")
                        .HasColumnName("address3")
                        .HasMaxLength(100);

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasMaxLength(250);

                    b.Property<short?>("CountryId")
                        .HasColumnName("country_id");

                    b.Property<short?>("CountyId")
                        .HasColumnName("county_id");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnName("date_modified")
                        .HasColumnType("datetime");

                    b.Property<int?>("OcId")
                        .HasColumnName("oc_id");

                    b.Property<string>("PostalCode")
                        .HasColumnName("postal_code")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int?>("ReferenceId")
                        .HasColumnName("reference_id");

                    b.Property<int?>("StateProvinceId")
                        .HasColumnName("state_province_id");

                    b.Property<string>("UserModified")
                        .HasColumnName("user_modified")
                        .HasMaxLength(9)
                        .IsUnicode(false);

                    b.HasKey("AddressId");

                    b.ToTable("address");
                });

            modelBuilder.Entity("CCIA.Models.Applications", b =>
                {
                    b.Property<int>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("app_id");

                    b.Property<decimal?>("AcresApplied")
                        .HasColumnName("acres_applied")
                        .HasColumnType("decimal(14, 2)");

                    b.Property<bool?>("AppApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("app_approved")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("AppApprover")
                        .HasColumnName("app_approver")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("AppCancelled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("app_cancelled")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("AppCancelledBy")
                        .HasColumnName("app_cancelled_by")
                        .HasMaxLength(9)
                        .IsUnicode(false);

                    b.Property<DateTime?>("AppCompleteDt")
                        .HasColumnName("app_complete_dt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("AppDateAppr")
                        .HasColumnName("app_date_appr")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("AppDateDenied")
                        .HasColumnName("app_date_denied")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("AppDeadline")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("app_deadline")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("AppDenied")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("app_denied")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("AppFee")
                        .HasColumnName("app_fee")
                        .HasColumnType("smallmoney");

                    b.Property<short?>("AppOriginalCertYear")
                        .HasColumnName("app_original_cert_year");

                    b.Property<bool?>("AppPkgComplete")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("app_pkg_complete")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("AppPostmark")
                        .HasColumnName("app_postmark")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("AppReceived")
                        .HasColumnName("app_received")
                        .HasColumnType("datetime");

                    b.Property<string>("AppRejector")
                        .HasColumnName("app_rejector")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("AppSubmitable")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("app_submitable")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("AppType")
                        .HasColumnName("app_type")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("ApplicantComments")
                        .HasColumnName("applicant_comments")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<int>("ApplicantId")
                        .HasColumnName("applicant_id");

                    b.Property<string>("ApplicantNotes")
                        .HasColumnName("applicant_notes")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<bool?>("Billable")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("billable")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("CertNum")
                        .HasColumnName("cert_num");

                    b.Property<short?>("CertYear")
                        .HasColumnName("cert_year");

                    b.Property<bool?>("Charged")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("charged")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("ClassProducedAccession")
                        .HasColumnName("class_produced_accession");

                    b.Property<int?>("ClassProducedId")
                        .HasColumnName("class_produced_id");

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<int?>("CropId")
                        .HasColumnName("crop_id");

                    b.Property<DateTime?>("DateNotified")
                        .HasColumnName("date_notified")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DatePlanted")
                        .HasColumnName("date_planted")
                        .HasColumnType("datetime");

                    b.Property<int>("Ecoregion")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ecoregion")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("EnteredVariety")
                        .HasColumnName("entered_variety")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<short?>("FarmCounty")
                        .HasColumnName("farm_county");

                    b.Property<decimal>("FeeCofactor")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("fee_cofactor")
                        .HasColumnType("decimal(5, 4)")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("FieldElevation")
                        .HasColumnName("field_elevation")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FieldHardiness")
                        .HasColumnName("field_hardiness")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FieldId")
                        .HasColumnName("field_id");

                    b.Property<string>("FieldName")
                        .HasColumnName("field_name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("GeoTextField")
                        .HasColumnName("geo_text_field")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<int?>("GrowerId")
                        .HasColumnName("grower_id");

                    b.Property<decimal?>("IncompleteFee")
                        .HasColumnName("incomplete_fee")
                        .HasColumnType("smallmoney");

                    b.Property<decimal?>("LateFee")
                        .HasColumnName("late_fee")
                        .HasColumnType("smallmoney");

                    b.Property<string>("LotNo")
                        .HasColumnName("lot_no")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("MapCenterLat")
                        .HasColumnName("map_center_lat")
                        .HasColumnType("numeric(25, 15)");

                    b.Property<decimal?>("MapCenterLong")
                        .HasColumnName("map_center_long")
                        .HasColumnType("numeric(25, 15)");

                    b.Property<string>("MapUploadFile")
                        .HasColumnName("map_upload_file")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool?>("MapVe")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("map_ve")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("MapZoom")
                        .HasColumnName("map_zoom");

                    b.Property<bool?>("Maps")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("maps")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("MapsSubDt")
                        .HasColumnName("maps_sub_dt")
                        .HasColumnType("datetime");

                    b.Property<int?>("Meridian")
                        .HasColumnName("meridian");

                    b.Property<DateTime?>("NotifyDate")
                        .HasColumnName("notify_date")
                        .HasColumnType("datetime");

                    b.Property<bool?>("NotifyNeeded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("notify_needed")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("OverrideLateFee")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("override_late_fee")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("PaperAppNum")
                        .HasColumnName("paper_app_num");

                    b.Property<string>("PoLotNum")
                        .HasColumnName("po_lot_num")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("PvgSelectionId")
                        .HasColumnName("pvg_selectionId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PvgSource")
                        .HasColumnName("pvg_source")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Range")
                        .HasColumnName("range")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<bool?>("Renewal")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("renewal")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Section")
                        .HasColumnName("section")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int?>("SelectedVarietyId")
                        .HasColumnName("selected_variety_id");

                    b.Property<string>("Status")
                        .HasColumnName("status")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("Tags")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("tags")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("TextField")
                        .HasColumnName("text_field")
                        .HasMaxLength(3000)
                        .IsUnicode(false);

                    b.Property<string>("Township")
                        .HasColumnName("township")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int?>("Trace")
                        .HasColumnName("trace");

                    b.Property<int?>("UserAppDataentry")
                        .HasColumnName("user_app_dataentry");

                    b.Property<DateTime?>("UserAppModDt")
                        .HasColumnName("user_app_mod_dt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UserAppModifed")
                        .HasColumnName("user_app_modifed");

                    b.Property<DateTime?>("UserEmpDateMod")
                        .HasColumnName("user_emp_date_mod")
                        .HasColumnType("datetime");

                    b.Property<string>("UserEmpModified")
                        .HasColumnName("user_emp_modified")
                        .HasMaxLength(9)
                        .IsUnicode(false);

                    b.Property<bool?>("WarningFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("warning_flag")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("AppId");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("ClassProducedId");

                    b.HasIndex("CropId");

                    b.HasIndex("FarmCounty");

                    b.HasIndex("GrowerId");

                    b.HasIndex("Trace");

                    b.HasIndex("AppId", "AppType", "ApplicantId", "GrowerId", "CropId", "AppCancelled", "Tags", "PoLotNum", "FieldName", "FarmCounty", "DatePlanted", "AcresApplied", "SelectedVarietyId", "ClassProducedId", "AppSubmitable", "Status", "AppApproved", "Maps", "CertYear")
                        .HasName("IX_applications_cert_year");

                    b.ToTable("applications");
                });

            modelBuilder.Entity("CCIA.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("CCIA.Models.BlendRequests", b =>
                {
                    b.Property<int>("BlendId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("blend_id");

                    b.Property<DateTime?>("ApproveDate")
                        .HasColumnName("approve_date")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Approved")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("approved")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ApprovedBy")
                        .HasColumnName("approved_by")
                        .HasMaxLength(9)
                        .IsUnicode(false);

                    b.Property<string>("BlendType")
                        .IsRequired()
                        .HasColumnName("blend_type")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Class")
                        .HasColumnName("class");

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<int>("ConditionerId")
                        .HasColumnName("conditioner_id");

                    b.Property<DateTime?>("DateNeeded")
                        .HasColumnName("date_needed")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateSubmitted")
                        .HasColumnName("date_submitted")
                        .HasColumnType("datetime");

                    b.Property<string>("DeliveryAddress")
                        .HasColumnName("delivery_address")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<string>("HowDeliver")
                        .HasColumnName("how_deliver")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("LbsLot")
                        .HasColumnName("lbs_lot")
                        .HasColumnType("numeric(16, 2)");

                    b.Property<DateTime>("RequestStarted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("request_started")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Status")
                        .HasColumnName("status")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("Submitted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("submitted")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("TagCountRequested")
                        .HasColumnName("tag_count_requested");

                    b.Property<int?>("TagType")
                        .HasColumnName("tag_type");

                    b.Property<int>("UserEntered")
                        .HasColumnName("user_entered");

                    b.Property<int?>("Variety")
                        .HasColumnName("variety");

                    b.HasKey("BlendId");

                    b.ToTable("blend_requests");
                });

            modelBuilder.Entity("CCIA.Models.CertRad", b =>
                {
                    b.Property<int>("CertNum")
                        .HasColumnName("cert_num");

                    b.Property<short>("CertYear")
                        .HasColumnName("cert_year");

                    b.Property<short>("Rad")
                        .HasColumnName("rad");

                    b.HasKey("CertNum", "CertYear", "Rad")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("cert_rad");
                });

            modelBuilder.Entity("CCIA.Models.Certs", b =>
                {
                    b.Property<int>("CertNum")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cert_num");

                    b.Property<short?>("CertYear")
                        .HasColumnName("cert_year");

                    b.Property<int>("ClassProduced")
                        .HasColumnName("class_produced");

                    b.Property<string>("ClassProducedChar")
                        .HasColumnName("class_produced_char")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DateEntered")
                        .HasColumnName("date_entered")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnName("date_modified")
                        .HasColumnType("datetime");

                    b.Property<int>("OfficialVarietyId")
                        .HasColumnName("official_variety_id");

                    b.Property<int>("OrgId")
                        .HasColumnName("org_id");

                    b.HasKey("CertNum");

                    b.ToTable("certs");
                });

            modelBuilder.Entity("CCIA.Models.ChangeRequests", b =>
                {
                    b.Property<int>("ChangeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("change_id");

                    b.Property<bool?>("Completed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("completed")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnName("completed_date")
                        .HasColumnType("datetime");

                    b.Property<int?>("Priority")
                        .HasColumnName("priority");

                    b.Property<DateTime?>("SubmitDate")
                        .HasColumnName("submit_date")
                        .HasColumnType("datetime");

                    b.Property<string>("Text")
                        .HasColumnName("text")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("ChangeId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("change_requests");
                });

            modelBuilder.Entity("CCIA.Models.Charges", b =>
                {
                    b.Property<int>("ChgId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("chg_id");

                    b.Property<bool?>("Approval")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("approval")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Approver")
                        .HasColumnName("approver")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Batchno")
                        .HasColumnName("batchno")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<decimal?>("ChargeAmt")
                        .HasColumnName("charge_amt")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("ChgCategory")
                        .IsRequired()
                        .HasColumnName("chg_category")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("Correction")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("correction")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("DateApplied")
                        .HasColumnName("date_applied")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateEntered")
                        .HasColumnName("date_entered")
                        .HasColumnType("datetime");

                    b.Property<int>("Delcharge")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("delcharge")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<bool?>("Holdchk")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("holdchk")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("Holddt")
                        .HasColumnName("holddt")
                        .HasColumnType("datetime");

                    b.Property<string>("Holdinit")
                        .HasColumnName("holdinit")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("LinkId")
                        .HasColumnName("link_id");

                    b.Property<string>("LinkType")
                        .IsRequired()
                        .HasColumnName("link_type")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Note")
                        .HasColumnName("note")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<int>("OrgId")
                        .HasColumnName("org_id");

                    b.HasKey("ChgId");

                    b.ToTable("charges");
                });

            modelBuilder.Entity("CCIA.Models.CondStatus", b =>
                {
                    b.Property<int>("CondStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cond_status_id");

                    b.Property<bool?>("AllowPretag")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("allow_pretag")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CondStatus1")
                        .IsRequired()
                        .HasColumnName("cond_status")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<DateTime>("CondUpdate")
                        .HasColumnName("cond_update")
                        .HasColumnType("datetime");

                    b.Property<short>("CondYear")
                        .HasColumnName("cond_year");

                    b.Property<DateTime?>("DatePretagApproved")
                        .HasColumnName("date_pretag_approved")
                        .HasColumnType("datetime");

                    b.Property<int>("OrgId")
                        .HasColumnName("org_id");

                    b.Property<bool?>("PrintSeries")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("print_series")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("RequestCciaPrintSeries")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("request_ccia_print_series")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("CondStatusId");

                    b.ToTable("cond_status");
                });

            modelBuilder.Entity("CCIA.Models.ContactAddress", b =>
                {
                    b.Property<int>("ContactId")
                        .HasColumnName("contact_id");

                    b.Property<int>("AddressId")
                        .HasColumnName("address_id");

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("active")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("Billing")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("billing")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("ContaddId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("contadd_id");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnName("date_modified")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Delivery")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("delivery")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("Mailing")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("mailing")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("PhysicalLoc")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("physical_loc")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("UserModified")
                        .HasColumnName("user_modified")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("ContactId", "AddressId");

                    b.ToTable("contact_address");
                });

            modelBuilder.Entity("CCIA.Models.Contacts", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("contact_id");

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("active")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("AgCommissioner")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ag_commissioner")
                        .HasDefaultValueSql("((0))");

                    b.Property<short?>("AlfalfaLastYearAgreement")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("alfalfa_last_year_agreement")
                        .HasDefaultValueSql("((2000))");

                    b.Property<bool?>("AllowApps")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("allow_apps")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("AllowPinning")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("allow_pinning")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("AllowSeeds")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("allow_seeds")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("AuditNotify")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_notify")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("BoardActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("board_active")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("BoardMember")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("board_member")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("BoardRepresent")
                        .HasColumnName("board_represent")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("BoardTitle")
                        .HasColumnName("board_title")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("BusPhone")
                        .HasColumnName("bus_phone")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("BusPhoneExt")
                        .HasColumnName("bus_phone_ext")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("CciaMember")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ccia_member")
                        .HasDefaultValueSql("((0))");

                    b.Property<short?>("CciaMemberYear")
                        .HasColumnName("ccia_member_year");

                    b.Property<bool?>("CertifiedSeedSx")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("certified_seed_sx")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CertifiedSeedSxNo")
                        .HasColumnName("certified_seed_sx_no")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("ContactType")
                        .HasColumnName("contact_type")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("CreateApps")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("create_apps")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("CurrentYearReview")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("current_year_review")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnName("date_added")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnName("date_modified")
                        .HasColumnType("datetime");

                    b.Property<bool?>("DeputyCommissioner")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deputy_commissioner")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("EmailAddr")
                        .HasColumnName("email_addr")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool?>("FarmAdvisor")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("farm_advisor")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("FaxNo")
                        .HasColumnName("fax_no")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("first_name")
                        .HasMaxLength(50);

                    b.Property<string>("FormOfAddr")
                        .HasColumnName("form_of_addr")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("HomePhone")
                        .HasColumnName("home_phone")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<short?>("IdahoVegetableLastYearAgreement")
                        .HasColumnName("idaho_vegetable_last_year_agreement");

                    b.Property<bool?>("LabContact")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("lab_contact")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("last_name")
                        .HasMaxLength(50);

                    b.Property<bool?>("MailListGrBook")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("mail_list_gr_book")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("MailListSeednotes")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("mail_list_seednotes")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("MemberSince")
                        .HasColumnName("member_since")
                        .HasColumnType("datetime");

                    b.Property<string>("Mi")
                        .HasColumnName("mi")
                        .HasColumnType("char(1)");

                    b.Property<string>("MobilePhone")
                        .HasColumnName("mobile_phone")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int?>("OrgId")
                        .HasColumnName("org_id");

                    b.Property<string>("PagerNo")
                        .HasColumnName("pager_no")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .HasColumnName("password")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Suffix")
                        .HasColumnName("suffix")
                        .HasMaxLength(50);

                    b.Property<short?>("SweetCornLastYearAgreement")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sweet_corn_last_year_agreement")
                        .HasDefaultValueSql("((2000))");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("UserAdding")
                        .HasColumnName("user_adding");

                    b.Property<DateTime?>("UserEmpModDt")
                        .HasColumnName("user_emp_mod_dt")
                        .HasColumnType("datetime");

                    b.Property<string>("UserEmpModified")
                        .HasColumnName("user_emp_modified")
                        .HasMaxLength(9)
                        .IsUnicode(false);

                    b.Property<int?>("UserModified")
                        .HasColumnName("user_modified");

                    b.HasKey("ContactId");

                    b.ToTable("contacts");
                });

            modelBuilder.Entity("CCIA.Models.ContactToOrg", b =>
                {
                    b.Property<int>("ContOrgId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cont_org_id");

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ContactId")
                        .HasColumnName("contact_id");

                    b.Property<string>("OrgId")
                        .HasColumnName("org_id")
                        .HasColumnType("nchar(10)");

                    b.HasKey("ContOrgId");

                    b.ToTable("contact_to_org");
                });

            modelBuilder.Entity("CCIA.Models.Countries", b =>
                {
                    b.Property<short>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("country_id");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnName("country_code")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnName("country_name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DateModified")
                        .HasColumnName("date_modified")
                        .HasColumnType("datetime");

                    b.Property<bool?>("OecdMember")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("oecd_member")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("UserModified")
                        .HasColumnName("user_modified")
                        .HasMaxLength(9)
                        .IsUnicode(false);

                    b.HasKey("CountryId");

                    b.ToTable("countries");
                });

            modelBuilder.Entity("CCIA.Models.County", b =>
                {
                    b.Property<short>("CountyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("county_id");

                    b.Property<int?>("AgCommOrg")
                        .HasColumnName("ag_comm_org");

                    b.Property<string>("CountyName")
                        .IsRequired()
                        .HasColumnName("county_name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DateModified")
                        .HasColumnName("date_modified")
                        .HasColumnType("datetime");

                    b.Property<string>("District")
                        .HasColumnName("district")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("Fips")
                        .HasColumnName("fips")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<short>("StateProvinceId")
                        .HasColumnName("StateProvinceID");

                    b.Property<string>("UserModified")
                        .HasColumnName("user_modified")
                        .HasMaxLength(9)
                        .IsUnicode(false);

                    b.HasKey("CountyId");

                    b.ToTable("county");
                });

            modelBuilder.Entity("CCIA.Models.Crops", b =>
                {
                    b.Property<int>("CropId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("crop_id");

                    b.Property<string>("Annual")
                        .HasColumnName("annual")
                        .HasColumnType("char(1)");

                    b.Property<short?>("AppDue")
                        .HasColumnName("app_due");

                    b.Property<short?>("AuditCondSampleSize")
                        .HasColumnName("audit_cond_sample_size");

                    b.Property<short?>("AuditLabSampleSize")
                        .HasColumnName("audit_lab_sample_size");

                    b.Property<bool?>("CertifiedCrop")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("certified_crop")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Crop")
                        .HasColumnName("crop")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CropKind")
                        .HasColumnName("crop_kind")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<short?>("CropRenewYears")
                        .HasColumnName("crop_renew_years");

                    b.Property<DateTime?>("DateEntered")
                        .HasColumnName("date_entered")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnName("date_modified")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Fov4Map")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("fov4_map")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Genus")
                        .IsRequired()
                        .HasColumnName("genus")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("Heritage")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("heritage")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("IdahoCropName")
                        .HasColumnName("idaho_crop_name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("IdahoFieldType")
                        .HasColumnName("idaho_field_type")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("IdahoVegetable")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idaho_vegetable")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("IsolationCertified")
                        .HasColumnName("isolation_certified")
                        .HasColumnType("numeric(10, 1)");

                    b.Property<bool?>("IsolationCrop")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("isolation_crop")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("IsolationFoundation")
                        .HasColumnName("isolation_foundation")
                        .HasColumnType("numeric(10, 1)");

                    b.Property<decimal?>("IsolationHybrid")
                        .HasColumnName("isolation_hybrid")
                        .HasColumnType("numeric(10, 1)");

                    b.Property<decimal?>("IsolationParentA")
                        .HasColumnName("isolation_parent_a")
                        .HasColumnType("numeric(10, 1)");

                    b.Property<decimal?>("IsolationParentB")
                        .HasColumnName("isolation_parent_b")
                        .HasColumnType("numeric(10, 1)");

                    b.Property<decimal?>("IsolationParentR")
                        .HasColumnName("isolation_parent_r")
                        .HasColumnType("numeric(10, 1)");

                    b.Property<decimal?>("IsolationRegistered")
                        .HasColumnName("isolation_registered")
                        .HasColumnType("numeric(10, 1)");

                    b.Property<bool?>("PreVarietyGermplasm")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pre_variety_germplasm")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("QbClass")
                        .HasColumnName("qb_class")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("QbInvitem")
                        .HasColumnName("qb_invitem")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ReportGroup")
                        .HasColumnName("report_group")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasColumnName("species")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UserEntered")
                        .HasColumnName("user_entered")
                        .HasMaxLength(9)
                        .IsUnicode(false);

                    b.Property<string>("UserModified")
                        .HasColumnName("user_modified")
                        .HasMaxLength(9)
                        .IsUnicode(false);

                    b.HasKey("CropId");

                    b.ToTable("crops");
                });

            modelBuilder.Entity("CCIA.Models.CropsRates", b =>
                {
                    b.Property<int>("CropRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("crop_rate_id");

                    b.Property<int>("CropId")
                        .HasColumnName("crop_id");

                    b.Property<DateTime?>("DateSet")
                        .HasColumnName("date_set")
                        .HasColumnType("datetime");

                    b.Property<int>("RateId")
                        .HasColumnName("rate_id");

                    b.Property<string>("SubType")
                        .HasColumnName("sub_type")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("CropRateId");

                    b.ToTable("crops_rates");
                });

            modelBuilder.Entity("CCIA.Models.CropStandards", b =>
                {
                    b.Property<int>("CropId")
                        .HasColumnName("crop_id");

                    b.Property<int>("StdId")
                        .HasColumnName("std_id");

                    b.HasKey("CropId", "StdId");

                    b.ToTable("crop_standards");
                });

            modelBuilder.Entity("CCIA.Models.DistrictCounty", b =>
                {
                    b.Property<short>("DistCountyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dist_county_id");

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<short?>("CountyId")
                        .HasColumnName("county_id");

                    b.Property<DateTime?>("DateEntered")
                        .HasColumnName("date_entered")
                        .HasColumnType("datetime");

                    b.Property<short?>("DistId")
                        .HasColumnName("dist_id");

                    b.Property<string>("UserModified")
                        .HasColumnName("user_modified")
                        .HasMaxLength(9)
                        .IsUnicode(false);

                    b.HasKey("DistCountyId");

                    b.ToTable("district_county");
                });

            modelBuilder.Entity("CCIA.Models.Districts", b =>
                {
                    b.Property<short>("DistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dist_id");

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("DistCode")
                        .HasColumnName("dist_code")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<int?>("DistLeader")
                        .HasColumnName("dist_leader");

                    b.Property<string>("DistName")
                        .HasColumnName("dist_name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("DistOffice")
                        .HasColumnName("dist_office");

                    b.HasKey("DistId");

                    b.ToTable("districts");
                });

            modelBuilder.Entity("CCIA.Models.Fees", b =>
                {
                    b.Property<int>("FeeId")
                        .HasColumnName("fee_id");

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("active")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnName("date_modified")
                        .HasColumnType("datetime");

                    b.Property<decimal>("FeeAmount")
                        .HasColumnName("fee_amount")
                        .HasColumnType("money");

                    b.Property<string>("FeeCategory")
                        .HasColumnName("fee_category")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Item")
                        .HasColumnName("item")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<int?>("ItemId")
                        .HasColumnName("item_id");

                    b.Property<string>("LinkType")
                        .HasColumnName("link_type")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("Unit")
                        .HasColumnName("unit")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<string>("UserModified")
                        .HasColumnName("user_modified")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("FeeId");

                    b.ToTable("fees");
                });

            modelBuilder.Entity("CCIA.Models.FieldInspect", b =>
                {
                    b.Property<int>("FldinspId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("fldinsp_id");

                    b.Property<decimal?>("AcresApproved")
                        .HasColumnName("acres_approved")
                        .HasColumnType("decimal(14, 2)");

                    b.Property<decimal?>("AcresCancelled")
                        .HasColumnName("acres_cancelled")
                        .HasColumnType("decimal(14, 2)");

                    b.Property<decimal?>("AcresFld")
                        .HasColumnName("acres_fld")
                        .HasColumnType("decimal(14, 2)");

                    b.Property<decimal?>("AcresGrowout")
                        .HasColumnName("acres_growout")
                        .HasColumnType("decimal(14, 2)");

                    b.Property<decimal?>("AcresInspOnly")
                        .HasColumnName("acres_insp_only")
                        .HasColumnType("decimal(14, 2)");

                    b.Property<decimal?>("AcresNoCrop")
                        .HasColumnName("acres_no_crop")
                        .HasColumnType("decimal(14, 2)");

                    b.Property<decimal?>("AcresRefund")
                        .HasColumnName("acres_refund")
                        .HasColumnType("decimal(14, 2)");

                    b.Property<decimal?>("AcresRejected")
                        .HasColumnName("acres_rejected")
                        .HasColumnType("decimal(14, 2)");

                    b.Property<int?>("AppId")
                        .HasColumnName("app_id");

                    b.Property<bool?>("Charged")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("charged")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("Complete")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("complete")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CompleteBy")
                        .HasColumnName("complete_by")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DateComplete")
                        .HasColumnName("date_complete")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateEntered")
                        .HasColumnName("date_entered")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateFldRpt")
                        .HasColumnName("date_fld_rpt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnName("date_modified")
                        .HasColumnType("datetime");

                    b.Property<string>("FldInspectComments")
                        .HasColumnName("fld_inspect_comments")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<int?>("OldCountyId")
                        .HasColumnName("old_county_id");

                    b.Property<string>("OldFieldName")
                        .HasColumnName("old_field_name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("PassClass")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pass_class")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("Passed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("passed")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("PathCms")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("path_cms")
                        .HasDefaultValueSql("((255))");

                    b.Property<string>("PathComments")
                        .HasColumnName("path_comments")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<DateTime?>("PathDate")
                        .HasColumnName("path_date")
                        .HasColumnType("datetime");

                    b.Property<int>("PathErw")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("path_erw")
                        .HasDefaultValueSql("((255))");

                    b.Property<string>("PathLab")
                        .HasColumnName("path_lab")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("PathNumPlants")
                        .HasColumnName("path_num_plants");

                    b.Property<int?>("PathNumSamples")
                        .HasColumnName("path_num_samples");

                    b.Property<int>("PathPlrv")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("path_plrv")
                        .HasDefaultValueSql("((255))");

                    b.Property<int>("PathPstvd")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("path_pstvd")
                        .HasDefaultValueSql("((255))");

                    b.Property<int>("PathPva")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("path_pva")
                        .HasDefaultValueSql("((255))");

                    b.Property<int>("PathPvm")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("path_pvm")
                        .HasDefaultValueSql("((255))");

                    b.Property<int>("PathPvs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("path_pvs")
                        .HasDefaultValueSql("((255))");

                    b.Property<int>("PathPvx")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("path_pvx")
                        .HasDefaultValueSql("((255))");

                    b.Property<int>("PathPvy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("path_pvy")
                        .HasDefaultValueSql("((255))");

                    b.Property<string>("PathSentVia")
                        .HasColumnName("path_sent_via")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ReportGenDt")
                        .HasColumnName("report_gen_dt")
                        .HasColumnType("datetime");

                    b.Property<bool?>("ReportGenerated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("report_generated")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("UserEntered")
                        .HasColumnName("user_entered")
                        .HasMaxLength(9)
                        .IsUnicode(false);

                    b.Property<string>("UserModified")
                        .HasColumnName("user_modified")
                        .HasMaxLength(9)
                        .IsUnicode(false);

                    b.HasKey("FldinspId");

                    b.HasIndex("AcresApproved", "AppId")
                        .HasName("IX_field_inpect_app_id");

                    b.ToTable("field_inspect");
                });

            modelBuilder.Entity("CCIA.Models.FieldMaps", b =>
                {
                    b.Property<int>("MapptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("mappt_id");

                    b.Property<int>("AppId")
                        .HasColumnName("app_id");

                    b.Property<decimal>("Latitude")
                        .HasColumnName("latitude")
                        .HasColumnType("numeric(25, 15)");

                    b.Property<decimal>("Longitude")
                        .HasColumnName("longitude")
                        .HasColumnType("numeric(25, 15)");

                    b.HasKey("MapptId");

                    b.ToTable("field_maps");
                });

            modelBuilder.Entity("CCIA.Models.LotBlends", b =>
                {
                    b.Property<int>("CompId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("comp_id");

                    b.Property<int>("BlendId")
                        .HasColumnName("blend_id");

                    b.Property<int>("Sid")
                        .HasColumnName("sid");

                    b.Property<decimal>("Weight")
                        .HasColumnName("weight")
                        .HasColumnType("numeric(16, 2)");

                    b.HasKey("CompId");

                    b.ToTable("lot_blends");
                });

            modelBuilder.Entity("CCIA.Models.Organizations", b =>
                {
                    b.Property<int>("OrgId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("org_id");

                    b.Property<int>("AddressId")
                        .HasColumnName("address_id");

                    b.Property<string>("OrgName")
                        .HasColumnName("org_name");

                    b.HasKey("OrgId");

                    b.HasIndex("AddressId");

                    b.ToTable("Organization");
                });

            modelBuilder.Entity("CCIA.Models.PlantingStocks", b =>
                {
                    b.Property<int>("PsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ps_id");

                    b.Property<int?>("AppId")
                        .HasColumnName("app_id");

                    b.Property<DateTime?>("DateEntered")
                        .HasColumnName("date_entered")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnName("date_modified")
                        .HasColumnType("datetime");

                    b.Property<int?>("OfficialVarietyId")
                        .HasColumnName("official_variety_id");

                    b.Property<decimal?>("PoundsPlanted")
                        .HasColumnName("pounds_planted")
                        .HasColumnType("decimal(14, 2)");

                    b.Property<int?>("PsAccession")
                        .HasColumnName("ps_accession");

                    b.Property<string>("PsCertNum")
                        .HasColumnName("ps_cert_num")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("PsClass")
                        .HasColumnName("ps_class");

                    b.Property<string>("PsEnteredVariety")
                        .HasColumnName("ps_entered_variety")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("PvxTest")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PVX_test")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("SeedPurchasedFrom")
                        .HasColumnName("seed_purchased_from")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("StateCountryGrown")
                        .HasColumnName("state_country_grown");

                    b.Property<int?>("StateCountryTagIssued")
                        .HasColumnName("state_country_tag_issued");

                    b.Property<int?>("UserCreator")
                        .HasColumnName("user_creator");

                    b.Property<string>("UserModified")
                        .HasColumnName("user_modified")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("WinterTest")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("winter_test")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("PsId");

                    b.HasIndex("PsClass");

                    b.ToTable("planting_stocks");
                });

            modelBuilder.Entity("CCIA.Models.Rates", b =>
                {
                    b.Property<long>("RateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rate_id");

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("active")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<decimal?>("Cost")
                        .HasColumnName("cost")
                        .HasColumnType("money");

                    b.Property<string>("Item")
                        .HasColumnName("item")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Modified")
                        .HasColumnName("modified")
                        .HasColumnType("datetime");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Unit")
                        .HasColumnName("unit")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.HasKey("RateId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("rates");
                });

            modelBuilder.Entity("CCIA.Models.Seedlab", b =>
                {
                    b.Property<int>("LabId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("lab_id");

                    b.Property<string>("AppEnteredBy")
                        .IsRequired()
                        .HasColumnName("app_entered_by")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime>("AppEnteredDate")
                        .HasColumnName("app_entered_date")
                        .HasColumnType("datetime");

                    b.Property<string>("AppUpdatedBy")
                        .HasColumnName("app_updated_by")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime?>("AppUpdatedDate")
                        .HasColumnName("app_updated_date")
                        .HasColumnType("datetime");

                    b.Property<bool?>("ClearlyMarkedForCert")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("clearly_marked_for_cert")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<string>("Condition")
                        .HasColumnName("condition")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DateDivided")
                        .HasColumnName("date_divided")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateReceived")
                        .HasColumnName("date_received")
                        .HasColumnType("date");

                    b.Property<string>("DividedBy")
                        .HasColumnName("divided_by")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<bool?>("HasSampleForm")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("has_sample_form")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("InsufficientSizeSample")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("insufficient_size_sample")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("LabYear")
                        .HasColumnName("lab_year");

                    b.Property<string>("RecordedBy")
                        .IsRequired()
                        .HasColumnName("recorded_by")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("SampleType")
                        .HasColumnName("sample_type")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("SeedsId")
                        .HasColumnName("seeds_id");

                    b.Property<double?>("Weight")
                        .HasColumnName("weight");

                    b.HasKey("LabId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("seedlab");
                });

            modelBuilder.Entity("CCIA.Models.SeedlabDodder", b =>
                {
                    b.Property<int>("LabId")
                        .HasColumnName("lab_id");

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<string>("CompletedBy")
                        .HasColumnName("completed_by")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnName("date_completed")
                        .HasColumnType("date");

                    b.Property<bool?>("Dodder")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dodder")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("WeightDodder")
                        .HasColumnName("weight_dodder")
                        .HasColumnType("numeric(7, 2)");

                    b.Property<decimal?>("WeightWorkingSample")
                        .HasColumnName("weight_working_sample")
                        .HasColumnType("numeric(18, 4)");

                    b.HasKey("LabId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("seedlab_dodder");
                });

            modelBuilder.Entity("CCIA.Models.SeedlabGermination", b =>
                {
                    b.Property<int>("LabId")
                        .HasColumnName("lab_id");

                    b.Property<int?>("CalcAbnormal")
                        .HasColumnName("calc_abnormal");

                    b.Property<int?>("CalcDead")
                        .HasColumnName("calc_dead");

                    b.Property<int?>("CalcDormant")
                        .HasColumnName("calc_dormant");

                    b.Property<int?>("CalcGerm")
                        .HasColumnName("calc_germ");

                    b.Property<int?>("CalcHard")
                        .HasColumnName("calc_hard");

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DatePlanted")
                        .HasColumnName("date_planted")
                        .HasColumnType("date");

                    b.Property<bool?>("InsufficientSizeGerm")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("insufficient_size_germ")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("NumSeedsPlanted")
                        .HasColumnName("num_seeds_planted");

                    b.Property<bool?>("PreChill")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pre_chill")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("PreChillDays")
                        .HasColumnName("pre_chill_days");

                    b.Property<int?>("Replicates")
                        .HasColumnName("replicates");

                    b.Property<int?>("ReportGerm")
                        .HasColumnName("report_germ");

                    b.Property<int?>("ReportHard")
                        .HasColumnName("report_hard");

                    b.Property<string>("StartedBy")
                        .HasColumnName("started_by")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Substrate")
                        .HasColumnName("substrate")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Temperature")
                        .HasColumnName("temperature")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("LabId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("seedlab_germination");
                });

            modelBuilder.Entity("CCIA.Models.SeedlabGerminationRead", b =>
                {
                    b.Property<int>("ReadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("read_id");

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DateRead")
                        .HasColumnName("date_read")
                        .HasColumnType("date");

                    b.Property<bool?>("Final")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("final")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("LabId")
                        .HasColumnName("lab_id");

                    b.Property<string>("ReadBy")
                        .HasColumnName("read_by")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("ReadId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("seedlab_germination_read");
                });

            modelBuilder.Entity("CCIA.Models.SeedlabGerminationReplicate", b =>
                {
                    b.Property<int>("RepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rep_id");

                    b.Property<int?>("AbnormalSeed")
                        .HasColumnName("abnormal_seed");

                    b.Property<int?>("DeadSeed")
                        .HasColumnName("dead_seed");

                    b.Property<int?>("DormantFresh")
                        .HasColumnName("dormant_fresh");

                    b.Property<int?>("GermCount")
                        .HasColumnName("germ_count");

                    b.Property<int?>("HardCount")
                        .HasColumnName("hard_count");

                    b.Property<int>("ReadId")
                        .HasColumnName("read_id");

                    b.Property<int?>("Remainder")
                        .HasColumnName("remainder");

                    b.Property<int>("RepNum")
                        .HasColumnName("rep_num");

                    b.HasKey("RepId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("seedlab_germination_replicate");
                });

            modelBuilder.Entity("CCIA.Models.SeedlabImpurity", b =>
                {
                    b.Property<int>("ImpurityListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("impurity_list_id");

                    b.Property<string>("Fraction")
                        .IsRequired()
                        .HasColumnName("fraction")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ImpurityType")
                        .IsRequired()
                        .HasColumnName("impurity_type")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("LabId")
                        .HasColumnName("lab_id");

                    b.Property<int>("ListId")
                        .HasColumnName("list_id");

                    b.Property<short>("NumberFound")
                        .HasColumnName("number_found");

                    b.Property<double?>("ReportRate")
                        .HasColumnName("report_rate");

                    b.HasKey("ImpurityListId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("seedlab_impurity");
                });

            modelBuilder.Entity("CCIA.Models.SeedlabList", b =>
                {
                    b.Property<int>("ListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("list_id");

                    b.Property<string>("CommonName")
                        .IsRequired()
                        .HasColumnName("common_name")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Genus")
                        .IsRequired()
                        .HasColumnName("genus")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ListName")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("list_name")
                        .HasComputedColumnSql("(((([genus]+isnull(' '+[species],''))+isnull(' '+[subspecies],''))+' | ')+[common_name])")
                        .HasMaxLength(655)
                        .IsUnicode(false);

                    b.Property<bool?>("Noxious")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("noxious")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("NoxiousType")
                        .HasColumnName("noxious_type")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ScientificName")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("scientific_name")
                        .HasComputedColumnSql("(([genus]+isnull(' '+[species],''))+isnull(' '+[subspecies],''))")
                        .HasMaxLength(152)
                        .IsUnicode(false);

                    b.Property<string>("Species")
                        .HasColumnName("species")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Subspecies")
                        .HasColumnName("subspecies")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("ListId");

                    b.HasIndex("Genus", "Species", "Subspecies", "CommonName")
                        .IsUnique()
                        .HasName("IX_seedlab_list")
                        .HasFilter("[species] IS NOT NULL AND [subspecies] IS NOT NULL");

                    b.ToTable("seedlab_list");
                });

            modelBuilder.Entity("CCIA.Models.SeedlabNoxiousWeed", b =>
                {
                    b.Property<int>("LabId")
                        .HasColumnName("lab_id");

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<string>("CompletedBy")
                        .HasColumnName("completed_by")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnName("date_completed")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateDodder")
                        .HasColumnName("date_dodder")
                        .HasColumnType("date");

                    b.Property<string>("DodderComments")
                        .HasColumnName("dodder_comments")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<string>("DodderCompletedBy")
                        .HasColumnName("dodder_completed_by")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("DodderCount")
                        .HasColumnName("dodder_count");

                    b.Property<string>("DodderResult")
                        .HasColumnName("dodder_result")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("InsufficientSizeDodder")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("insufficient_size_dodder")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("InsufficientSizeNoxious")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("insufficient_size_noxious")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RedriceComments")
                        .HasColumnName("redrice_comments")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<string>("RedriceCompletedBy")
                        .HasColumnName("redrice_completed_by")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("RedriceCount")
                        .HasColumnName("redrice_count");

                    b.Property<DateTime?>("RedriceDate")
                        .HasColumnName("redrice_date")
                        .HasColumnType("date");

                    b.Property<bool?>("RedriceInsufficientSize")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("redrice_insufficient_size")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RedriceResult")
                        .HasColumnName("redrice_result")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<double?>("RedriceWeight")
                        .HasColumnName("redrice_weight");

                    b.Property<double?>("WeightDodder")
                        .HasColumnName("weight_dodder");

                    b.Property<double?>("WeightWorkingSample")
                        .HasColumnName("weight_working_sample");

                    b.HasKey("LabId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("seedlab_noxious_weed");
                });

            modelBuilder.Entity("CCIA.Models.SeedlabNoxiousWeedList", b =>
                {
                    b.Property<int>("NoxiousListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("noxious_list_id");

                    b.Property<int>("LabId")
                        .HasColumnName("lab_id");

                    b.Property<int>("ListId")
                        .HasColumnName("list_id");

                    b.Property<int>("NumberFound")
                        .HasColumnName("number_found");

                    b.Property<double?>("ReportRate")
                        .HasColumnName("report_rate");

                    b.HasKey("NoxiousListId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("seedlab_noxious_weed_list");
                });

            modelBuilder.Entity("CCIA.Models.SeedlabPurity", b =>
                {
                    b.Property<int>("LabId")
                        .HasColumnName("lab_id");

                    b.Property<double?>("BadlyDiscoloredGrams")
                        .HasColumnName("badly_discolored_grams");

                    b.Property<double?>("BushelWeight")
                        .HasColumnName("bushel_weight");

                    b.Property<decimal?>("CalcBadlyDiscolored")
                        .HasColumnName("calc_badly_discolored")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("CalcChewingInsectDamage")
                        .HasColumnName("calc_chewing_insect_damage")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("CalcForeignMaterial")
                        .HasColumnName("calc_foreign_material")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("CalcInert")
                        .HasColumnName("calc_inert")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("CalcOtherCrop")
                        .HasColumnName("calc_other_crop")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("CalcPurity")
                        .HasColumnName("calc_purity")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("CalcSplitsAndCracks")
                        .HasColumnName("calc_splits_and_cracks")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("CalcWeed")
                        .HasColumnName("calc_weed")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<double?>("ChewingInsectDamageGrams")
                        .HasColumnName("chewing_insect_damage_grams");

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<string>("CompletedBy")
                        .HasColumnName("completed_by")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnName("date_completed")
                        .HasColumnType("date");

                    b.Property<double?>("ForeignMaterialGrams")
                        .HasColumnName("foreign_material_grams");

                    b.Property<bool?>("InertChaff")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("inert_chaff")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("InertDescription")
                        .HasColumnName("inert_description")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<bool?>("InertDirt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("inert_dirt")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("InertGrams")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("inert_grams")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("InertPlantFragments")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("inert_plant_fragments")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("InertSeedFragments")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("inert_seed_fragments")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("InertSoil")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("inert_soil")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("InertStems")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("inert_stems")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("InertTreatmentColorant")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("inert_treatment_colorant")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("InsufficientSizePurity")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("insufficient_size_purity")
                        .HasDefaultValueSql("((0))");

                    b.Property<short?>("OtherCropCount")
                        .HasColumnName("other_crop_count");

                    b.Property<double?>("OtherCropGrams")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("other_crop_grams")
                        .HasDefaultValueSql("((0))");

                    b.Property<short?>("OtherVarietyCount")
                        .HasColumnName("other_variety_count");

                    b.Property<double?>("OtherVarietyGrams")
                        .HasColumnName("other_variety_grams");

                    b.Property<double?>("PureSeedGrams")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pure_seed_grams")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("ReportBadlyDiscolored")
                        .HasColumnName("report_badly_discolored")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("ReportChewingInsectDamage")
                        .HasColumnName("report_chewing_insect_damage")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("ReportForeignMaterial")
                        .HasColumnName("report_foreign_material")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("ReportInert")
                        .HasColumnName("report_inert")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("ReportOtherCrop")
                        .HasColumnName("report_other_crop")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("ReportOtherVariety")
                        .HasColumnName("report_other_variety")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("ReportPurity")
                        .HasColumnName("report_purity")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("ReportSplitsCracks")
                        .HasColumnName("report_splits_cracks")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("ReportWeed")
                        .HasColumnName("report_weed")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<double?>("SplitsCracksGrams")
                        .HasColumnName("splits_cracks_grams");

                    b.Property<short?>("WeedSeedCount")
                        .HasColumnName("weed_seed_count");

                    b.Property<double?>("WeedSeedGrams")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weed_seed_grams")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("WeightWorkingSample")
                        .HasColumnName("weight_working_sample");

                    b.HasKey("LabId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("seedlab_purity");
                });

            modelBuilder.Entity("CCIA.Models.SeedlabPurityLists", b =>
                {
                    b.Property<int>("PurityListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("purity_list_id");

                    b.Property<short?>("Count")
                        .HasColumnName("count");

                    b.Property<double?>("Grams")
                        .HasColumnName("grams");

                    b.Property<int>("LabId")
                        .HasColumnName("lab_id");

                    b.Property<int>("ListId")
                        .HasColumnName("list_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("PurityListId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("LabId", "Type", "ListId")
                        .IsUnique()
                        .HasName("IX_seedlab_purity_lists");

                    b.ToTable("seedlab_purity_lists");
                });

            modelBuilder.Entity("CCIA.Models.SeedlabSeeds", b =>
                {
                    b.Property<int>("LabId")
                        .HasColumnName("lab_id");

                    b.Property<string>("CertNumber")
                        .HasColumnName("cert_number")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("CondId")
                        .HasColumnName("cond_id");

                    b.Property<string>("CondText")
                        .HasColumnName("cond_text")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int>("CropId")
                        .HasColumnName("crop_id");

                    b.Property<string>("LotNumber")
                        .HasColumnName("lot_number")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("LotSize")
                        .HasColumnName("lot_size")
                        .HasColumnType("numeric(16, 2)");

                    b.Property<string>("SeedLab")
                        .HasColumnName("seed_lab")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SubmittingLabNumber")
                        .HasColumnName("submitting_lab_number")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("Treated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("treated")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("VarOffId")
                        .HasColumnName("var_off_id");

                    b.Property<string>("VarietyName")
                        .HasColumnName("variety_name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("LabId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("seedlab_seeds");
                });

            modelBuilder.Entity("CCIA.Models.StateProvince", b =>
                {
                    b.Property<int>("StateProvinceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StateProvinceID");

                    b.Property<short>("CountryId")
                        .HasColumnName("country_id");

                    b.Property<DateTime>("DateModified")
                        .HasColumnName("date_modified")
                        .HasColumnType("datetime");

                    b.Property<string>("StateProvinceCode")
                        .HasMaxLength(2);

                    b.Property<string>("StateProvinceName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("StateProvinceId");

                    b.ToTable("state_province");
                });

            modelBuilder.Entity("CCIA.Models.SxLabResults", b =>
                {
                    b.Property<int>("SeedsId")
                        .HasColumnName("seeds_id");

                    b.Property<string>("AssayResults")
                        .HasColumnName("assay_results")
                        .HasColumnType("char(1)");

                    b.Property<string>("AssayResults2")
                        .HasColumnName("assay_results2")
                        .HasColumnType("char(1)");

                    b.Property<bool?>("AssayTest")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("assay_test")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("AssayTest2")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("assay_test2")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("BadlyDiscoloredPercent")
                        .HasColumnName("badly_discolored_percent")
                        .HasColumnType("numeric(8, 7)");

                    b.Property<decimal?>("BushelWeight")
                        .HasColumnName("bushel_weight")
                        .HasColumnType("numeric(7, 2)");

                    b.Property<bool?>("CciaConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ccia_confirmed")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("CciaGerm")
                        .HasColumnName("ccia_germ");

                    b.Property<decimal?>("ChewingInsectDamagePercent")
                        .HasColumnName("chewing_insect_damage_percent")
                        .HasColumnType("numeric(8, 7)");

                    b.Property<DateTime?>("ConfirmDate")
                        .HasColumnName("confirm_date")
                        .HasColumnType("datetime");

                    b.Property<string>("ConfirmUser")
                        .HasColumnName("confirm_user")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DataEntryDate")
                        .HasColumnName("data_entry_date")
                        .HasColumnType("datetime");

                    b.Property<string>("DataEntryUser")
                        .HasColumnName("data_entry_user")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DateComplete")
                        .HasColumnName("date_complete")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("DodderGrams")
                        .HasColumnName("dodder_grams")
                        .HasColumnType("numeric(7, 2)");

                    b.Property<decimal?>("ForeignMaterialPercent")
                        .HasColumnName("foreign_material_percent")
                        .HasColumnType("numeric(8, 7)");

                    b.Property<string>("ForeignMaterialsComments")
                        .HasColumnName("foreign_materials_comments")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("GermDays")
                        .HasColumnName("germ_days");

                    b.Property<decimal?>("GermHardSeed")
                        .HasColumnName("germ_hard_seed")
                        .HasColumnType("numeric(8, 7)");

                    b.Property<decimal?>("GermPercent")
                        .HasColumnName("germ_percent")
                        .HasColumnType("numeric(8, 7)");

                    b.Property<string>("GermResults")
                        .HasColumnName("germ_results")
                        .HasColumnType("char(1)");

                    b.Property<string>("GermTemp")
                        .HasColumnName("germ_temp")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("InertComments")
                        .HasColumnName("inert_comments")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<decimal?>("InertPercent")
                        .HasColumnName("inert_percent")
                        .HasColumnType("numeric(8, 7)");

                    b.Property<decimal?>("LbsCanceled")
                        .HasColumnName("lbs_canceled")
                        .HasColumnType("numeric(16, 2)");

                    b.Property<decimal?>("LbsPassed")
                        .HasColumnName("lbs_passed")
                        .HasColumnType("numeric(16, 2)");

                    b.Property<decimal?>("LbsRejected")
                        .HasColumnName("lbs_rejected")
                        .HasColumnType("numeric(16, 2)");

                    b.Property<string>("NoxiousComments")
                        .HasColumnName("noxious_comments")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<short?>("NoxiousCount")
                        .HasColumnName("noxious_count");

                    b.Property<decimal?>("NoxiousGrams")
                        .HasColumnName("noxious_grams")
                        .HasColumnType("numeric(7, 2)");

                    b.Property<decimal?>("NoxiousPercent")
                        .HasColumnName("noxious_percent")
                        .HasColumnType("numeric(8, 7)");

                    b.Property<string>("OtherCropComments")
                        .HasColumnName("other_crop_comments")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<short?>("OtherCropCount")
                        .HasColumnName("other_crop_count");

                    b.Property<decimal?>("OtherCropPercent")
                        .HasColumnName("other_crop_percent")
                        .HasColumnType("numeric(8, 7)");

                    b.Property<string>("OtherVarietyComments")
                        .HasColumnName("other_variety_comments")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<short?>("OtherVarietyCount")
                        .HasColumnName("other_variety_count");

                    b.Property<decimal?>("OtherVarietyPercent")
                        .HasColumnName("other_variety_percent")
                        .HasColumnType("numeric(8, 7)");

                    b.Property<DateTime?>("PrivateLabDate")
                        .HasColumnName("private_lab_date")
                        .HasColumnType("datetime");

                    b.Property<int?>("PrivateLabId")
                        .HasColumnName("private_lab_id");

                    b.Property<string>("PrivateLabName")
                        .HasColumnName("private_lab_name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PrivateLabNumber")
                        .HasColumnName("private_lab_number")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("PurityComments")
                        .HasColumnName("purity_comments")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<decimal?>("PurityGrams")
                        .HasColumnName("purity_grams")
                        .HasColumnType("numeric(7, 2)");

                    b.Property<decimal?>("PurityPercent")
                        .HasColumnName("purity_percent")
                        .HasColumnType("numeric(8, 7)");

                    b.Property<string>("PurityResults")
                        .HasColumnName("purity_results")
                        .HasColumnType("char(1)");

                    b.Property<string>("SampleComments")
                        .HasColumnName("sample_comments")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<decimal?>("SplitsAndCracksPercent")
                        .HasColumnName("splits_and_cracks_percent")
                        .HasColumnType("numeric(8, 7)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnName("update_date")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateUser")
                        .HasColumnName("update_user")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("WeedSeedComments")
                        .HasColumnName("weed_seed_comments")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<short?>("WeedSeedCount")
                        .HasColumnName("weed_seed_count");

                    b.Property<decimal?>("WeedSeedPercent")
                        .HasColumnName("weed_seed_percent")
                        .HasColumnType("numeric(8, 7)");

                    b.HasKey("SeedsId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("sx_lab_results");
                });

            modelBuilder.Entity("CCIA.Models.VarFamily", b =>
                {
                    b.Property<int>("VarFamId")
                        .HasColumnName("var_fam_id");

                    b.Property<bool?>("Alias")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("alias")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("Confidential")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("confidential")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("DateEntered")
                        .HasColumnName("date_entered")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnName("date_updated")
                        .HasColumnType("datetime");

                    b.Property<string>("DescHyperlink")
                        .HasColumnName("desc_hyperlink")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<bool?>("Experimental")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("experimental")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("InUse")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("in_use")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("Oecd")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("oecd")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("OecdCountry")
                        .HasColumnName("oecd_country");

                    b.Property<int?>("OrigOfficialId")
                        .HasColumnName("orig_official_id");

                    b.Property<bool?>("PrivateCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("private_code")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("UpdateComments")
                        .HasColumnName("update_comments")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<string>("UserEntered")
                        .HasColumnName("user_entered")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UserUpdated")
                        .HasColumnName("user_updated")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("VarComments")
                        .HasColumnName("var_comments")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<string>("VarFamName")
                        .IsRequired()
                        .HasColumnName("var_fam_name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("VarOffId")
                        .HasColumnName("var_off_id");

                    b.Property<string>("VarietyType")
                        .HasColumnName("variety_type")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("VarFamId");

                    b.HasIndex("VarOffId");

                    b.ToTable("var_family");
                });

            modelBuilder.Entity("CCIA.Models.VarOfficial", b =>
                {
                    b.Property<int>("VarOffId")
                        .HasColumnName("var_off_id");

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("active")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("BriefDescription")
                        .HasColumnName("brief_description")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<bool?>("CciaCertified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ccia_certified")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("CciaCertifiedDate")
                        .HasColumnName("ccia_certified_date")
                        .HasColumnType("datetime");

                    b.Property<string>("CciaCertifier")
                        .HasColumnName("ccia_certifier")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasMaxLength(2500)
                        .IsUnicode(false);

                    b.Property<bool?>("Confidential")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("confidential")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("CropId")
                        .HasColumnName("crop_id");

                    b.Property<bool?>("CtcApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ctc_approved")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("CtcDateApproved")
                        .HasColumnName("ctc_date_approved")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateEntered")
                        .HasColumnName("date_entered")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnName("date_updated")
                        .HasColumnType("datetime");

                    b.Property<string>("DescHyperlink")
                        .HasColumnName("desc_hyperlink")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<bool?>("DescriptionOnFile")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("description_on_file")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("Experimental")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("experimental")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("GenBreeder")
                        .HasColumnName("gen_breeder")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("GenCertified")
                        .HasColumnName("gen_certified")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("GenFoundation")
                        .HasColumnName("gen_foundation")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("GenRegistered")
                        .HasColumnName("gen_registered")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("Generation")
                        .HasColumnName("generation")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<bool?>("GermplasmEntity")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("germplasm_entity")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("HistoricalName")
                        .HasColumnName("historical_name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool?>("Oecd")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("oecd")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("OtherStateCert")
                        .HasColumnName("other_state_cert")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int?>("OwnerId")
                        .HasColumnName("owner_id");

                    b.Property<bool?>("PendingCertification")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pending_certification")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("PlantPatent")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("plant_patent")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("PlantPatentDate")
                        .HasColumnName("plant_patent_date")
                        .HasColumnType("datetime");

                    b.Property<int?>("PlantPatentNum")
                        .HasColumnName("plant_patent_num");

                    b.Property<bool?>("PrivateCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("private_code")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("ProducerId")
                        .HasColumnName("producer_id");

                    b.Property<bool?>("Pvp")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pvp")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("PvpDate")
                        .HasColumnName("pvp_date")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PvpExpDate")
                        .HasColumnName("pvp_exp_date")
                        .HasColumnType("datetime");

                    b.Property<int?>("PvpNumber")
                        .HasColumnName("pvp_number");

                    b.Property<int?>("PvpYears")
                        .HasColumnName("pvp_years");

                    b.Property<string>("ReasonForInactive")
                        .HasColumnName("reason_for_inactive")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<bool?>("RiceQa")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rice_qa")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RiceQaColor")
                        .HasColumnName("rice_qa_color")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("TitleV")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("title_v")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("Turfgrass")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("turfgrass")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("UserEntered")
                        .HasColumnName("user_entered")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("UserUpdated")
                        .HasColumnName("user_updated")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("VarCategory")
                        .HasColumnName("var_category")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("VarOffName")
                        .IsRequired()
                        .HasColumnName("var_off_name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool?>("VarReviewBoard")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("var_review_board")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("VarReviewBoardDate")
                        .HasColumnName("var_review_board_date")
                        .HasColumnType("datetime");

                    b.Property<string>("VarStatus")
                        .HasColumnName("var_status")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("VarOffId");

                    b.HasIndex("CropId");

                    b.ToTable("var_official");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CCIA.Models.Applications", b =>
                {
                    b.HasOne("CCIA.Models.Organizations", "ApplicantOrganization")
                        .WithMany("AppliedApplications")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CCIA.Models.AbbrevClassProduced", "ClassProduced")
                        .WithMany("Applications")
                        .HasForeignKey("ClassProducedId")
                        .HasConstraintName("FK_Applications_abbrev_class_produced");

                    b.HasOne("CCIA.Models.Crops", "Crop")
                        .WithMany("Applications")
                        .HasForeignKey("CropId")
                        .HasConstraintName("FK_Applications_Crops");

                    b.HasOne("CCIA.Models.County", "County")
                        .WithMany("Applications")
                        .HasForeignKey("FarmCounty");

                    b.HasOne("CCIA.Models.Organizations", "GrowerOrganization")
                        .WithMany("GrownApplications")
                        .HasForeignKey("GrowerId");

                    b.HasOne("CCIA.Models.Applications", "TraceNavigation")
                        .WithMany("InverseTraceNavigation")
                        .HasForeignKey("Trace")
                        .HasConstraintName("FK_Applications_Applications2");
                });

            modelBuilder.Entity("CCIA.Models.Organizations", b =>
                {
                    b.HasOne("CCIA.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CCIA.Models.PlantingStocks", b =>
                {
                    b.HasOne("CCIA.Models.AbbrevClassProduced", "PsClassNavigation")
                        .WithMany("PlantingStocks")
                        .HasForeignKey("PsClass")
                        .HasConstraintName("FK_planting_stocks_farm_field");
                });

            modelBuilder.Entity("CCIA.Models.VarFamily", b =>
                {
                    b.HasOne("CCIA.Models.VarOfficial", "VarOff")
                        .WithMany("VarFamily")
                        .HasForeignKey("VarOffId")
                        .HasConstraintName("FK_Var_Family_Var_Official");
                });

            modelBuilder.Entity("CCIA.Models.VarOfficial", b =>
                {
                    b.HasOne("CCIA.Models.Crops", "Crop")
                        .WithMany("VarOfficial")
                        .HasForeignKey("CropId")
                        .HasConstraintName("FK_Var_Official_Crops");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CCIA.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CCIA.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CCIA.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CCIA.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
